@page "/fetchdata"
@using GestaoEstadoFluxor.Features.FetchData.Store
@inherits FluxorComponent
@inject IDispatcher dispatcher
@inject IState<FetchDataState> fetchDataState


<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (Loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-default" @onclick="LoadData">Refresh</button>
}

@code {
    private bool Initialized => fetchDataState.Value.Initialized;
    private bool Loading => fetchDataState.Value.Loading;
    private WeatherForecast[]? forecasts => fetchDataState.Value.Forecasts;

    protected override void OnInitialized()
    {
        if (!Initialized)
        {
            LoadData();
            dispatcher.Dispatch(new SetInitialized());
        }
        base.OnInitialized();
    }

    void LoadData()
    {
        dispatcher.Dispatch(new LoadData());
    }
}